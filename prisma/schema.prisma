generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ============================================================================
// CORE ENTITIES
// ============================================================================

model User {
  id         String   @id @default(cuid())
  whatsappId String   @unique @map("whatsapp_user_id")
  whatsappPn String?  @unique @map("whatsapp_user_pn")
  name       String?
  createdAt  DateTime @default(now()) @map("created_at")

  // Relations
  groupMemberships GroupMembership[]
  messages         Message[]
  whitelistEntries Whitelist[]
  blacklistEntries Blacklist[]
  removalQueue     RemovalQueue[]
  removalHistory   RemovalHistory[]

  @@map("users")
}

model Group {
  id                         String   @id @default(cuid())
  whatsappId                 String   @unique @map("whatsapp_group_id")
  name                       String?
  inactivityThresholdMinutes Int      @default(43200) @map("inactivity_threshold_minutes") // 30 days
  createdAt                  DateTime @default(now()) @map("created_at")

  // Relations
  groupMemberships GroupMembership[]
  messages         Message[]
  whitelistEntries Whitelist[]
  blacklistEntries Blacklist[]
  removalQueue     RemovalQueue[]
  removalHistory   RemovalHistory[]

  @@map("groups")
}

model GroupMembership {
  id           String    @id @default(cuid())
  userId       String    @map("user_id")
  groupId      String    @map("group_id")
  joinDate     DateTime  @map("join_date")
  lastActiveAt DateTime? @map("last_active_at")
  createdAt    DateTime  @default(now()) @map("created_at")

  // Relations
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  group Group @relation(fields: [groupId], references: [id], onDelete: Cascade)

  // Unique constraint to prevent duplicate memberships
  @@unique([userId, groupId])
  @@map("group_memberships")
}

// ============================================================================
// ACTIVITY TRACKING ENTITIES
// ============================================================================

model Message {
  id          String   @id @default(cuid())
  whatsappId  String   @unique @map("whatsapp_message_id")
  userId      String   @map("user_id")
  groupId     String   @map("group_id")
  messageType String   @map("message_type")
  date        DateTime
  createdAt   DateTime @default(now()) @map("created_at")

  // Relations
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  group Group @relation(fields: [groupId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([groupId])
  @@map("messages")
}

// ============================================================================
// MEMBER MANAGEMENT ENTITIES
// ============================================================================

model Whitelist {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  groupId   String   @map("group_id")
  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  group Group @relation(fields: [groupId], references: [id], onDelete: Cascade)

  // Unique constraint to prevent duplicate whitelist entries
  @@unique([userId, groupId])
  @@map("whitelist")
}

model Blacklist {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  groupId   String   @map("group_id")
  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  group Group @relation(fields: [groupId], references: [id], onDelete: Cascade)

  // Unique constraint to prevent duplicate blacklist entries
  @@unique([userId, groupId])
  @@map("blacklist")
}

// ============================================================================
// PROCESSING QUEUE ENTITIES
// ============================================================================
model RemovalQueue {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  groupId   String   @map("group_id")
  createdAt DateTime @default(now()) @map("created_at")

  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  group Group @relation(fields: [groupId], references: [id], onDelete: Cascade)

  @@unique([userId, groupId])
  @@map("removal_queue")
}

enum RemovalOutcome {
  SUCCESS
  FAILURE
}

model RemovalHistory {
  id          String         @id @default(cuid())
  userId      String         @map("user_id")
  groupId     String         @map("group_id")
  outcome     RemovalOutcome
  reason      String? // e.g. inactivity, manual admin, error msg
  processedAt DateTime       @default(now()) @map("processed_at")

  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  group Group @relation(fields: [groupId], references: [id], onDelete: Cascade)

  @@index([userId, groupId])
  @@map("removal_history")
}

// ============================================================================
// EVOLUTION API INTEGRATION ENTITIES
// ============================================================================

model WebhookEvent {
  id        String   @id @default(cuid())
  event     String   @map("event_type")
  instance  String   @map("instance_name")
  data      Json // Store raw webhook JSON data
  createdAt DateTime @default(now()) @map("created_at")

  @@index([event])
  @@index([instance])
  @@index([createdAt])
  @@map("webhook_events")
}
